<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 22.3">

    <issue
        id="ResAuto"
        severity="Fatal"
        message="In Gradle projects, always use http://schemas.android.com/apk/res-auto for custom attributes"
        category="Correctness"
        priority="9"
        summary="Finds resource namespaces with hardcoded package names"
        explanation="In Gradle projects, the actual package used in the final APK can vary; for you can add a `.debug` package suffix in one version and not the other. Therefore, you should *not* hardcode the application package in the resource; instead, use the special namespace `http://schemas.android.com/apk/res-auto` which will cause the tools to figure out the right namespace for the resource regardless of the actual package used during the build."
        errorLine1="              xmlns:app=&quot;http://schemas.android.com/apk/res/com.engine.mnsfz&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\fragment_index.xml"
            line="18"
            column="15"/>
    </issue>

    <issue
        id="MissingRegistered"
        severity="Error"
        message="Class referenced in the manifest, cn.waps.OffersWebView, was not found in the project or the libraries"
        category="Correctness"
        priority="8"
        summary="Ensures that classes referenced in the manifest are present in the project or libraries"
        explanation="If a class is referenced in the manifest, it must also exist in the project (or in one of the libraries included by the project. This check helps uncover typos in registration names, or attempts to rename or move classes without updating the manifest file properly."
        url="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        urls="http://developer.android.com/guide/topics/manifest/manifest-intro.html"
        errorLine1="        &lt;activity android:name=&quot;cn.waps.OffersWebView&quot; android:configChanges=&quot;keyboardHidden|orientation&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\AndroidManifest.xml"
            line="28"
            column="9"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 11 (current min is 10): android.widget.AbsListView#setAdapter"
        category="Correctness"
        priority="6"
        summary="Finds API accesses to APIs that are not supported in all targeted API versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on *all* versions targeted by this application (according to its minimum SDK attribute in the manifest).

If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `AndroidManifest.xml` file.
If your code is *deliberately* accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.

If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v11` folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.

Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            gridView.setAdapter(mAdapter);"
        errorLine2="                     ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\java\com\engine\mnsfz\fragment\ContentFragment.java"
            line="126"
            column="22"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Checks that the manifest specifies a targetSdkVersion that is recent"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.

To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="    &lt;uses-sdk"
        errorLine2="    ^">
        <location
            file="D:\github\project\mnsfz\src\main\AndroidManifest.xml"
            line="7"
            column="5"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;hardwareAccelerated&quot; is only used in API level 11 and higher (current min is 10)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute."
        errorLine1="        android:hardwareAccelerated=&quot;true&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\AndroidManifest.xml"
            line="14"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;showAsAction&quot; is only used in API level 11 and higher (current min is 10)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute."
        errorLine1="        android:showAsAction=&quot;never&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\res\menu\index.xml"
            line="5"
            column="9"/>
    </issue>

    <issue
        id="UnusedAttribute"
        severity="Warning"
        message="Attribute &quot;showAsAction&quot; is only used in API level 11 and higher (current min is 10)"
        category="Correctness"
        priority="6"
        summary="Finds usages of attributes that will not be used (read) on all targeted versions"
        explanation="This check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the the `minSdkVersion` attribute).

This is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance of functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute."
        errorLine1="        android:showAsAction=&quot;never&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\res\menu\main_menu.xml"
            line="22"
            column="9"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="Avoid non-default constructors in fragments: use a default constructor plus Fragment#setArguments(Bundle) instead"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="    public ImageGridFragment(String pageUrl,NetFech fech) {"
        errorLine2="    ^">
        <location
            file="D:\github\project\mnsfz\src\main\java\com\engine\mnsfz\fragment\ImageGridFragment.java"
            line="85"/>
    </issue>

    <issue
        id="WrongCall"
        severity="Fatal"
        message="Suspicious method call; should probably call &quot;layout&quot; rather than &quot;onLayout&quot;"
        category="Correctness"
        priority="6"
        summary="Finds cases where the wrong call is made, such as calling `onMeasure` instead of `measure`"
        explanation="Custom views typically need to call `measure()` on their children, not `onMeasure`. Ditto for onDraw, onLayout, etc."
        errorLine1="                this.onLayout(false, getLeft(), getTop(), getRight(), getBottom());"
        errorLine2="                     ~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\java\com\etsy\android\grid\ExtendableListView.java"
            line="2043"
            column="22"/>
    </issue>

    <issue
        id="InflateParams"
        severity="Warning"
        message="Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout&apos;s root element)"
        category="Correctness"
        priority="5"
        summary="Ensures that a proper parent context is passed to a layout inflater"
        explanation="When inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored."
        url="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        urls="http://www.doubleencore.com/2013/05/layout-inflation-as-intended"
        errorLine1="           view= LayoutInflater.from(mContext).inflate(R.layout.grid_image_item,null) ;"
        errorLine2="                                                                                ~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\java\com\engine\mnsfz\GridAdapter.java"
            line="43"
            column="81"/>
    </issue>

    <issue
        id="ManifestOrder"
        severity="Warning"
        message="&lt;uses-permission> tag appears after &lt;application> tag"
        category="Correctness"
        priority="5"
        summary="Checks for manifest problems like `&lt;uses-sdk>` after the `&lt;application>` tag"
        explanation="The &lt;application> tag should appear after the elements which declare which version you need, which features you need, which libraries you need, and so on. In the past there have been subtle bugs (such as themes not getting applied correctly) when the `&lt;application>` tag appears before some of these other elements, so it&apos;s best to order your manifest in the logical dependency order."
        errorLine1="    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; />"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\AndroidManifest.xml"
            line="32"
            column="5"/>
    </issue>

    <issue
        id="MissingId"
        severity="Warning"
        message="This &lt;fragment> tag should specify an id or a tag to preserve state across activity restarts"
        category="Correctness"
        priority="5"
        summary="Ensures that XML tags like `&lt;fragment>` specify an `id` or `tag` attribute"
        explanation="If you do not specify an android:id or an android:tag attribute on a &lt;fragment> element, then if the activity is restarted (for example for an orientation rotation) you may lose state. From the fragment documentation:

&quot;Each fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it). * Supply the android:id attribute with a unique ID.
* Supply the android:tag attribute with a unique string.
If you provide neither of the previous two, the system uses the ID of the container view."
        url="http://developer.android.com/guide/components/fragments.html"
        urls="http://developer.android.com/guide/components/fragments.html"
        errorLine1="&lt;fragment android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:name=&quot;com.engine.mnsfz.fragment.ContentFragment&quot;>&lt;/fragment>"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\content.xml"
            line="7"
            column="1"/>
    </issue>

    <issue
        id="MissingId"
        severity="Warning"
        message="This &lt;fragment> tag should specify an id or a tag to preserve state across activity restarts"
        category="Correctness"
        priority="5"
        summary="Ensures that XML tags like `&lt;fragment>` specify an `id` or `tag` attribute"
        explanation="If you do not specify an android:id or an android:tag attribute on a &lt;fragment> element, then if the activity is restarted (for example for an orientation rotation) you may lose state. From the fragment documentation:

&quot;Each fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it). * Supply the android:id attribute with a unique ID.
* Supply the android:tag attribute with a unique string.
If you provide neither of the previous two, the system uses the ID of the container view."
        url="http://developer.android.com/guide/components/fragments.html"
        urls="http://developer.android.com/guide/components/fragments.html"
        errorLine1="    &lt;fragment"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\fragment_left_menu.xml"
            line="8"
            column="5"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="Old buildToolsVersion; recommended version is 19.0.2 or later"
        category="Correctness"
        priority="4"
        summary="Looks for old or obsolete Gradle library dependencies"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    buildToolsVersion &quot;19.0.0&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\build.gradle"
            line="22"
            column="5"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This minSdkVersion value (7) is not used; it is always overridden by the value specified in the Gradle build script (10)"
        category="Correctness"
        priority="4"
        summary="Looks for values specified in the manifest file which are overridden by values in Gradle"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="        android:minSdkVersion=&quot;7&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\AndroidManifest.xml"
            line="8"
            column="9"/>
    </issue>

    <issue
        id="GradleOverrides"
        severity="Warning"
        message="This targetSdkVersion value (16) is not used; it is always overridden by the value specified in the Gradle build script (19)"
        category="Correctness"
        priority="4"
        summary="Looks for values specified in the manifest file which are overridden by values in Gradle"
        explanation="The value of (for example) `minSdkVersion` is only used if it is not specified in the `build.gradle` build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity."
        errorLine1="        android:targetSdkVersion=&quot;16&quot; />"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\AndroidManifest.xml"
            line="9"
            column="9"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;sp&quot; instead of &quot;dp&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Looks for uses of `dp` instead of `sp` dimensions for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                android:textSize=&quot;28dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\activity_image_detail.xml"
            line="38"
            column="17"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;sp&quot; instead of &quot;dp&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Looks for uses of `dp` instead of `sp` dimensions for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                android:textSize=&quot;28dp&quot;"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\image_detail_pager.xml"
            line="38"
            column="17"/>
    </issue>

    <issue
        id="ObsoleteLayoutParam"
        severity="Warning"
        message="Invalid layout param in a LinearLayout: layout_centerHorizontal"
        category="Performance"
        priority="6"
        summary="Looks for layout params that are not valid for the given parent layout"
        explanation="The given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed."
        errorLine1="            android:layout_centerHorizontal=&quot;true&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\grid_image_item.xml"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (com.engine.mnsfz.fragment.ContentFragment.1)"
        category="Performance"
        priority="4"
        summary="Ensures that Handler classes do not hold on to a reference to an outer class"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private Handler handler = new Handler() {"
        errorLine2="                                  ~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\java\com\engine\mnsfz\fragment\ContentFragment.java"
            line="51"
            column="35"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (com.engine.mnsfz.ImageDetailActivity.1)"
        category="Performance"
        priority="4"
        summary="Ensures that Handler classes do not hold on to a reference to an outer class"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private Handler handler = new Handler() {"
        errorLine2="                                  ~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\java\com\engine\mnsfz\ImageDetailActivity.java"
            line="65"
            column="35"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (com.engine.mnsfz.fragment.ImageGridFragment.1)"
        category="Performance"
        priority="4"
        summary="Ensures that Handler classes do not hold on to a reference to an outer class"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private Handler handler = new Handler() {"
        errorLine2="                                  ~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\java\com\engine\mnsfz\fragment\ImageGridFragment.java"
            line="68"
            column="35"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use new SparseArray&lt;ImageType>(...) instead for better performance"
        category="Performance"
        priority="4"
        summary="Looks for opportunities to replace HashMaps with the more efficient SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.

This is *particularly* useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.

If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1="    private Map&lt;Integer, ImageType> map = new HashMap&lt;Integer, ImageType>();"
        errorLine2="                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\java\com\engine\mnsfz\ImageDetailActivity.java"
            line="60"
            column="43"/>
    </issue>

    <issue
        id="FloatMath"
        severity="Warning"
        message="Use java.lang.Math#sin instead of android.util.FloatMath#sin() since it is faster as of API 8"
        category="Performance"
        priority="3"
        summary="Suggests replacing `android.util.FloatMath` calls with `java.lang.Math`"
        explanation="In older versions of Android, using `android.util.FloatMath` was recommended for performance reasons when operating on floats. However, on modern hardware doubles are just as fast as float (though they take more memory), and in recent versions of Android, `FloatMath` is actually slower than using `java.lang.Math` due to the way the JIT optimizes `java.lang.Math`. Therefore, you should use `Math` instead of `FloatMath` if you are only targeting Froyo and above."
        url="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        urls="http://developer.android.com/guide/practices/design/performance.html#avoidfloat"
        errorLine1="  return (float) FloatMath.sin(f);"
        errorLine2="                           ~~~">
        <location
            file="D:\github\project\mnsfz\src\main\java\com\jeremyfeinstein\slidingmenu\lib\CustomViewAbove.java"
            line="303"
            column="28"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.layout.activity_main appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\activity_main.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.dimen.list_padding appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;list_padding&quot;>10dp&lt;/dimen>"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\res\values\dimens.xml"
            line="10"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.integer.num_cols appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;integer name=&quot;num_cols&quot;>1&lt;/integer>"
        errorLine2="             ~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\res\values\dimens.xml"
            line="13"
            column="14"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.layout.image_detail_pager appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\image_detail_pager.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.layout.main_layout appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\main_layout.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.drawable.more appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="D:\github\project\mnsfz\src\main\res\drawable\more.xml"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource R.string.hello_world appears to be unused"
        category="Performance"
        priority="3"
        summary="Looks for unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;hello_world&quot; >Hello world!"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="D:\github\project\mnsfz\src\main\res\values\strings.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="UselessLeaf"
        severity="Warning"
        message="This FrameLayout view is useless (no children, no background, no id, no style)"
        category="Performance"
        priority="2"
        summary="Checks whether a leaf layout can be removed."
        explanation="A layout that has no children or no background can often be removed (since it is invisible) for a flatter and more efficient layout hierarchy."
        errorLine1="    &lt;FrameLayout"
        errorLine2="    ^"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\activity_main.xml"
            line="11"
            column="5"/>
    </issue>

    <issue
        id="IconLauncherShape"
        severity="Warning"
        message="Launcher icons should not fill every pixel of their square region; see the design guide for details"
        category="Usability:Icons"
        priority="6"
        summary="Checks that launcher icons follow the recommended visual style"
        explanation="According to the Android Design Guide (http://developer.android.com/design/style/iconography.html) your launcher icons should &quot;use a distinct silhouette&quot;, a &quot;three-dimensional, front view, with a slight perspective as if viewed from above, so that users perceive some depth.&quot;

The unique silhouette implies that your launcher icon should not be a filled square."
        url="http://developer.android.com/design/style/iconography.html"
        urls="http://developer.android.com/design/style/iconography.html">
        <location
            file="D:\github\project\mnsfz\src\main\res\drawable-hdpi\icon_luncher.jpg"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-hdpi: empty_photo.png (found in drawable-xhdpi)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="D:\github\project\mnsfz\src\main\res\drawable-hdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-mdpi: dropdown_disabled_holo_dark.9.png, dropdown_disabled_holo_light.9.png, empty_photo.png, ic_menu_back.png, ic_menu_back_on.png... (3 more)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="D:\github\project\mnsfz\src\main\res\drawable-mdpi"/>
    </issue>

    <issue
        id="IconDensities"
        severity="Warning"
        message="Missing the following drawables in drawable-xhdpi: dropdown_disabled_holo_dark.9.png, dropdown_disabled_holo_light.9.png, ic_menu_back.png, ic_menu_back_on.png, ic_menu_settings_holo_light.png... (2 more)"
        category="Usability:Icons"
        priority="4"
        summary="Ensures that icons provide custom versions for all supported densities"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.

Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="D:\github\project\mnsfz\src\main\res\drawable-xhdpi"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\activity_image_detail.xml"
            line="29"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\fragment_index.xml"
            line="29"
            column="9"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing contentDescription attribute on image"
        category="Accessibility"
        priority="3"
        summary="Ensures that image widgets provide a contentDescription"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="        &lt;ImageView"
        errorLine2="        ^"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\image_detail_pager.xml"
            line="29"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;获取积分&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;获取积分&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\left_menu.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;俏皮女孩&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;俏皮女孩&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\left_menu.xml"
            line="10"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;阳光女孩 &quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;阳光女孩 &quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\left_menu.xml"
            line="12"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;清纯女孩&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;清纯女孩&quot;/>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\left_menu.xml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;清纯&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;清纯&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\main_layout.xml"
            line="12"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;阳光&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;阳光&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\main_layout.xml"
            line="18"
            column="13"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;俏皮&quot;, should use @string resource"
        category="Internationalization"
        priority="5"
        summary="Looks for hardcoded text attributes which should be converted to resource lookup"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="            android:text=&quot;俏皮&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="D:\github\project\mnsfz\src\main\res\layout\main_layout.xml"
            line="25"
            column="13"/>
    </issue>

</issues>
